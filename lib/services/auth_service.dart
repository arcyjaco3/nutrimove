import 'package:firebase_auth/firebase_auth.dart';

class AuthService {
  final FirebaseAuth _auth = FirebaseAuth.instance;

  // ğŸ”¹ Rejestracja uÅ¼ytkownika i wysÅ‚anie e-maila weryfikacyjnego
  Future<String?> signUp({
    required String email,
    required String password,
  }) async {
    try {
      UserCredential userCredential = await _auth.createUserWithEmailAndPassword(
        email: email,
        password: password,
      );

      // Pobranie uÅ¼ytkownika i wysÅ‚anie e-maila weryfikacyjnego
      User? user = userCredential.user;
      if (user != null) {
        await user.sendEmailVerification();
      }

      return null; // Sukces - brak bÅ‚Ä™du
    } on FirebaseAuthException catch (e) {
      if (e.code == 'weak-password') {
        return 'HasÅ‚o jest zbyt sÅ‚abe. Wybierz silniejsze hasÅ‚o.';
      } else if (e.code == 'email-already-in-use') {
        return 'Podany adres e-mail jest juÅ¼ zarejestrowany.';
      } else {
        return 'WystÄ…piÅ‚ bÅ‚Ä…d: ${e.message}';
      }
    } catch (e) {
      return 'Nieoczekiwany bÅ‚Ä…d: ${e.toString()}';
    }
  }

  // ğŸ”¹ Logowanie uÅ¼ytkownika (bez sprawdzania weryfikacji e-maila)
  Future<String?> signIn({
    required String email,
    required String password,
  }) async {
    try {
      await _auth.signInWithEmailAndPassword(
        email: email,
        password: password,
      );

      return null; // Logowanie udane
    } on FirebaseAuthException catch (e) {
      if (e.code == 'user-not-found') {
        return 'Nie znaleziono uÅ¼ytkownika o tym adresie e-mail.';
      } else if (e.code == 'wrong-password') {
        return 'Podano bÅ‚Ä™dne hasÅ‚o.';
      } else {
        return 'BÅ‚Ä…d logowania: ${e.message}';
      }
    } catch (e) {
      return 'Nieoczekiwany bÅ‚Ä…d: ${e.toString()}';
    }
  }

  // ğŸ”¹ Wylogowanie uÅ¼ytkownika
  Future<void> signOut() async {
    await _auth.signOut();
  }
}
